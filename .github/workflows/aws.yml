# GitHub Actions workflow for building a React TypeScript app, pushing to ECR via AWS OIDC, and deploying to ECS

name: Deploy React App to AWS ECS

on:
  push:
    branches:
      - main

# Global environment variables
env:
  AWS_REGION: us-east-1           # 사용할 AWS 리전
  ECR_REPOSITORY: helloapp        # ECR 리포지토리 이름
  ECS_CLUSTER: bbs-frontend       # ECS 클러스터 이름
  ECS_SERVICE: bbs-frontend-service       # ECS 서비스 이름
  # Task Definition 이름을 “family” 또는 전체 ARN으로 설정
  ECS_TASK_DEFINITION: bbs-frontend   # 기존에 등록된 Task Definition family name
  CONTAINER_NAME: react        # Task Definition 내 컨테이너 이름
  IMAGE_TAG: ${{ github.sha }}    # Docker 이미지 태그 (커밋 SHA)

permissions:
  contents: read                  # for actions/checkout
  id-token: write                 # for OIDC

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDCRole  # replace with your IAM Role ARN
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Retrieve current ECS task definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition' \
            --output json > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: false
